Imports System.Threading.Tasks
Imports System.Drawing.Imaging

Public Class SuperOverlay
    Public Shared PARALLEL_PROCESSES As Integer = 4
    Public Const MAX_LEVELS As Integer = 9

    Public Const MAX_QUADRANTS As Integer = 4
    Public Const CREATE_TEMP_IMAGE As Boolean = False

    Dim ImagesLocalPath As String = "Images"
    Dim OutputPath As String = String.Empty

    Public CreateImages As Boolean = False
    Public Alpha As Decimal = 85

    Public minLodPixels As Decimal = 500 '900
    Public maxLodPixels As Decimal = 1800 '1800
    Public minFadeExtent As Decimal = 400
    Public maxFadeExtent As Decimal = 450

    'Public MapRange() As Decimal = {75, 25, -35, 45}
    Public MapRange() As Decimal = {70, 65, 15, 20} '(75, 50, 5, 45)

    Dim ImageSize As Integer = 900 '  Each Image in pixels
    Dim OriginalImageSize As Integer = 3600 '  Each Image in pixels
    Dim ImageDegrees As Double = 0.25 '  Degrees at the lowest level -> ImageSize / 0.25 = Image Pixels for 1 degree

    Private Class Layer
        Public Name As String = String.Empty
        Public localpath As String = String.Empty
        'Child quadrants 
        '0: left upper quadrant
        '1: right upper quadrant
        '2: left lower quadrant
        '3: right lower quadrant
        Public NextQuadrants(MAX_QUADRANTS - 1) As String
        'Coordinates
        Public North As Decimal
        Public South As Decimal
        Public West As Decimal
        Public East As Decimal
        'Set Default Quadrants
        Public Sub SetDefaultQuadrants(ByVal quadrant As String)
            For index As Integer = 0 To MAX_QUADRANTS - 1
                NextQuadrants(index) = quadrant
            Next
        End Sub
    End Class

    Public Sub New(Top As Integer, Bottom As Integer, Left As Integer, Right As Integer, Optional pCreateImages As Boolean = CREATE_TEMP_IMAGE)
        MapRange = {Top, Bottom, Left, Right}
        CreateImages = pCreateImages
    End Sub

    Public Function GetAlphaHex() As String
        Return Hex(Int((Alpha / 100) * 255)).PadLeft(2, "0"c) 'Pad with 0's for alpha values = 0
    End Function


    Public Sub CreateSuperOverlay(ByVal pOutputpath As String, Optional ByVal pImagesLocalPath As String = "Images")

        OutputPath = pOutputpath
        'Check if directory exist 
        If (Not My.Computer.FileSystem.DirectoryExists(OutputPath)) Then
            My.Computer.FileSystem.CreateDirectory(OutputPath)
        End If

        ImagesLocalPath = pImagesLocalPath

        'Check if directory exist 
        If (Not My.Computer.FileSystem.DirectoryExists(OutputPath & "\" & ImagesLocalPath)) Then
            My.Computer.FileSystem.CreateDirectory(OutputPath & "\" & ImagesLocalPath)
        End If

        'Create the initial level
        Dim ZeroLayer As New Layer()
        ZeroLayer.Name = "0"
        ZeroLayer.localpath = ""
        'Create the initial quadrants
        For index As Integer = 0 To MAX_QUADRANTS - 1
            ZeroLayer.NextQuadrants(index) = index.ToString()
        Next

        Dim MapPixelsHeight As Integer = (MapRange(0) - MapRange(1)) * OriginalImageSize
        Dim MapPixelsWidth As Integer = (MapRange(3) - MapRange(2)) * OriginalImageSize

        ZeroLayer.North = MapRange(0)
        'ZeroLayer.South = MapRange(1) - (128 - (MapRange(0) - MapRange(1))) 'OLD
        ZeroLayer.South = MapRange(1) - (((Math.Pow(2, MAX_LEVELS) * ImageSize) - MapPixelsHeight) / (ImageSize / ImageDegrees))
        ZeroLayer.West = MapRange(2)
        'ZeroLayer.East = (128 - (MapRange(3) - MapRange(2))) + MapRange(3) 'OLD
        ZeroLayer.East = (((Math.Pow(2, MAX_LEVELS) * ImageSize) - MapPixelsWidth) / (ImageSize / ImageDegrees)) + MapRange(3)

        'Generate Levels from zero
        GenerateLevel(ZeroLayer, 1, 0)
    End Sub

    Private Function GetImagePath(deepLevel As Integer) As String
        Dim result As String = String.Empty
        For i As Integer = 0 To deepLevel - 2
            result &= "..\"
        Next
        Return result
    End Function

    Private Sub GenerateLevel(ByVal CurrentLayer As Layer, ByVal deepLevel As Integer, ByVal drawOrderKml As Integer)
        'Base case for recurrent calls
        If deepLevel <= MAX_LEVELS Then
            'For each quadrant create the KML and use recursive calls to create the deeper nodes

            'Set the limit processes
            Dim options As New ParallelOptions()
            options.MaxDegreeOfParallelism = PARALLEL_PROCESSES
            Parallel.For(0, MAX_QUADRANTS, options,
                Sub(index) 'Row of the Matrix

                    'Create the new level
                    Dim NextLayer As New Layer()

                    'Path of quadrants
                    NextLayer.Name = CurrentLayer.NextQuadrants(index)
                    NextLayer.localpath = CurrentLayer.localpath
                    NextLayer.SetDefaultQuadrants(CurrentLayer.NextQuadrants(index))

                    Select Case index
                        Case 0
                            'First quadrant Coordinates
                            NextLayer.North = CurrentLayer.North
                            NextLayer.South = (CurrentLayer.North + CurrentLayer.South) / 2
                            NextLayer.West = CurrentLayer.West
                            NextLayer.East = (CurrentLayer.East + CurrentLayer.West) / 2
                        Case 1
                            'Second quadrant Coordinates
                            NextLayer.North = CurrentLayer.North
                            NextLayer.South = (CurrentLayer.North + CurrentLayer.South) / 2
                            NextLayer.West = (CurrentLayer.East + CurrentLayer.West) / 2
                            NextLayer.East = CurrentLayer.East
                        Case 2
                            'Third quadrant Coordinates
                            NextLayer.North = (CurrentLayer.North + CurrentLayer.South) / 2
                            NextLayer.South = CurrentLayer.South
                            NextLayer.West = CurrentLayer.West
                            NextLayer.East = (CurrentLayer.East + CurrentLayer.West) / 2
                        Case 3
                            'Fourth quadrant Coordinates
                            NextLayer.North = (CurrentLayer.North + CurrentLayer.South) / 2
                            NextLayer.South = CurrentLayer.South
                            NextLayer.West = (CurrentLayer.East + CurrentLayer.West) / 2
                            NextLayer.East = CurrentLayer.East
                    End Select

                    If (NextLayer.West < MapRange(3) AndAlso NextLayer.North > MapRange(1)) Then 'JSA2016 Check condition
                        'Generate KML Files 
                        GenerateKmlFile(NextLayer, drawOrderKml + 1, deepLevel)
                        'Prepare for the nex recursive call
                        NextLayer.localpath &= "\" + CurrentLayer.NextQuadrants(index)
                        For j As Integer = 0 To MAX_QUADRANTS - 1
                            NextLayer.NextQuadrants(j) &= j.ToString()
                        Next
                        If deepLevel < MAX_LEVELS Then
                            My.Computer.FileSystem.CreateDirectory(OutputPath & NextLayer.localpath)
                        End If
                        'Recursive calls to generate next level of KML Files
                        GenerateLevel(NextLayer, deepLevel + 1, drawOrderKml + 1)
                    End If
                End Sub)
        End If
    End Sub

    Private Sub GenerateKmlFile(ByVal CurrentLayer As Layer, ByVal drawOrder As Integer, ByVal deepLevel As Integer)

        'For each quadrant create the KML and use recursive calls to create the deeper nodes
        For index As Integer = 0 To MAX_QUADRANTS - 1

            Dim nameKml As String = CurrentLayer.NextQuadrants(index)
            Dim filePath As String = "\" + nameKml
            Dim northCoordinates As Decimal = CurrentLayer.North
            Dim southCoordinates As Decimal = CurrentLayer.South
            Dim westCoordinates As Decimal = CurrentLayer.West
            Dim eastCoordinates As Decimal = CurrentLayer.East
            'Kml Files in specific quadrant
            Dim kml As System.IO.StreamWriter = My.Computer.FileSystem.OpenTextFileWriter(OutputPath & CurrentLayer.localpath & filePath + ".kml", False, System.Text.Encoding.UTF8)

            If deepLevel < MAX_LEVELS Then
                kml.WriteLine("<?xml version='1.0' encoding='UTF-8'?>")
                kml.WriteLine("<kml xmlns='http://earth.google.com/kml/2.1'>")
                kml.WriteLine("<Document>")

                ' For test pourpose it can be added the lookat option to center the view
                'If (deepLevel = 1) Then
                '    kml.WriteLine("<LookAt>")
                '    kml.WriteLine("<longitude>21.5</longitude>")
                '    kml.WriteLine("<latitude>69.7</latitude>")
                '    kml.WriteLine("<altitude>80000</altitude>")
                '    kml.WriteLine("<altitudeMode>absolute</altitudeMode>")
                '    kml.WriteLine("</LookAt>")
                'End If

                kml.WriteLine("<Region>")
                kml.WriteLine("<Lod>")
                kml.WriteLine("<minLodPixels>" & minLodPixels & "</minLodPixels>")
                kml.WriteLine("<maxLodPixels>" & maxLodPixels & "</maxLodPixels>")
                kml.WriteLine("<minFadeExtent>" & minFadeExtent & "</minFadeExtent>")
                kml.WriteLine("<maxFadeExtent>" & maxFadeExtent & "</maxFadeExtent>")
                kml.WriteLine("</Lod>")
                kml.WriteLine("<LatLonAltBox>")
                kml.WriteLine("<north>" + CStr(northCoordinates) + "</north>")
                kml.WriteLine("<south>" + CStr(southCoordinates) + "</south>")
                kml.WriteLine("<west>" + CStr(westCoordinates) + "</west>")
                kml.WriteLine("<east>" + CStr(eastCoordinates) + "</east>")

                kml.WriteLine("</LatLonAltBox>")
                kml.WriteLine("</Region>")

                'Add the information for the deep levels
                For j As Integer = 0 To MAX_QUADRANTS - 1

                    Dim nameKmlChild As String = nameKml + j.ToString()
                    Dim kmlNorthChild As Decimal
                    Dim kmlSouthChild As Decimal
                    Dim kmlWestChild As Decimal
                    Dim kmlEastChild As Decimal
                    Select Case j
                        Case 0
                            'First quadrant child Coordinates
                            kmlNorthChild = northCoordinates
                            kmlSouthChild = (northCoordinates + southCoordinates) / 2
                            kmlWestChild = westCoordinates
                            kmlEastChild = (eastCoordinates + westCoordinates) / 2
                        Case 1
                            'Second quadrant child Coordinates
                            kmlNorthChild = northCoordinates
                            kmlSouthChild = (northCoordinates + southCoordinates) / 2
                            kmlWestChild = (eastCoordinates + westCoordinates) / 2
                            kmlEastChild = eastCoordinates
                        Case 2
                            'Third quadrant child Coordinates
                            kmlNorthChild = (northCoordinates + southCoordinates) / 2
                            kmlSouthChild = southCoordinates
                            kmlWestChild = westCoordinates
                            kmlEastChild = (eastCoordinates + westCoordinates) / 2
                        Case 3
                            'Fourth quadrant child Coordinates
                            kmlNorthChild = (northCoordinates + southCoordinates) / 2
                            kmlSouthChild = southCoordinates
                            kmlWestChild = (eastCoordinates + westCoordinates) / 2
                            kmlEastChild = eastCoordinates
                    End Select

                    'Check if this layer must be written into the kml file
                    If (kmlWestChild < MapRange(3) AndAlso kmlNorthChild > MapRange(1)) Then 'JSA2016 Check condition
                        kml.WriteLine("<NetworkLink>")
                        kml.WriteLine("<name>" + nameKmlChild + "</name>")
                        kml.WriteLine("<Region>")
                        kml.WriteLine("<Lod>")
                        kml.WriteLine("<minLodPixels>" & minLodPixels & "</minLodPixels>")
                        kml.WriteLine("<maxLodPixels>" & maxLodPixels & "</maxLodPixels>")
                        kml.WriteLine("<minFadeExtent>" & minFadeExtent & "</minFadeExtent>")
                        kml.WriteLine("<maxFadeExtent>" & maxFadeExtent & "</maxFadeExtent>")
                        kml.WriteLine("</Lod>")
                        kml.WriteLine("<LatLonAltBox>")
                        kml.WriteLine("<north>" + CStr(kmlNorthChild) + "</north><south>" + CStr(kmlSouthChild) + "</south>")
                        kml.WriteLine("<west>" + CStr(kmlWestChild) + "</west><east>" + CStr(kmlEastChild) + "</east>")
                        kml.WriteLine("</LatLonAltBox>")
                        kml.WriteLine("</Region>")
                        kml.WriteLine("<Link>")
                        kml.WriteLine("<href>" + filePath + "\" + nameKmlChild + ".kml</href>")
                        kml.WriteLine("<viewRefreshMode>onRegion</viewRefreshMode>")
                        kml.WriteLine("</Link>")
                        kml.WriteLine("</NetworkLink>")
                    End If
                Next
                kml.WriteLine("<GroundOverlay>")
                kml.WriteLine("<color>" & GetAlphaHex() & "FFFFFF</color>")
                kml.WriteLine("<drawOrder>" + CStr(drawOrder) + "</drawOrder>")
                kml.WriteLine("<Icon>")
                kml.WriteLine("<href>" & GetImagePath(deepLevel) & ImagesLocalPath & "\" & (deepLevel - 1) & "\" & nameKml & ".png</href>")
                kml.WriteLine("</Icon>")
                kml.WriteLine("<LatLonBox>")
                kml.WriteLine("<north>" + CStr(northCoordinates) + "</north><south>" + CStr(southCoordinates) + "</south>")
                kml.WriteLine("<west>" + CStr(westCoordinates) + "</west><east>" + CStr(eastCoordinates) + "</east>")

                kml.WriteLine("</LatLonBox>")
                kml.WriteLine("</GroundOverlay>")
                kml.WriteLine("</Document>")
                kml.WriteLine("</kml>")
            ElseIf deepLevel = MAX_LEVELS Then
                'Content last level files
                kml.WriteLine("<?xml version='1.0' encoding='UTF-8'?>")
                kml.WriteLine("<kml xmlns='http://earth.google.com/kml/2.1'>")
                kml.WriteLine("<Document>")
                kml.WriteLine("<Region>")
                kml.WriteLine("<Lod>")
                kml.WriteLine("<minLodPixels>" & minLodPixels & "</minLodPixels>")
                kml.WriteLine("<maxLodPixels>-1</maxLodPixels>")
                kml.WriteLine("<minFadeExtent>" & minFadeExtent & "</minFadeExtent>")
                kml.WriteLine("<maxFadeExtent>" & maxFadeExtent & "</maxFadeExtent>")
                kml.WriteLine("</Lod>")
                kml.WriteLine("<LatLonAltBox>")

                kml.WriteLine("<north>" + CStr(northCoordinates) + "</north>")
                kml.WriteLine("<south>" + CStr(southCoordinates) + "</south>")
                kml.WriteLine("<west>" + CStr(westCoordinates) + "</west>")
                kml.WriteLine("<east>" + CStr(eastCoordinates) + "</east>")

                kml.WriteLine("</LatLonAltBox>")
                kml.WriteLine("</Region>")
                kml.WriteLine("<GroundOverlay>")
                kml.WriteLine("<color>" & GetAlphaHex() & "FFFFFF</color>")
                kml.WriteLine("<drawOrder>" + CStr(drawOrder) + "</drawOrder>")
                kml.WriteLine("<Icon>")
                kml.WriteLine("<href>" & GetImagePath(deepLevel) & ImagesLocalPath & "\" & (deepLevel - 1) & "\" & nameKml & ".png</href>")
                kml.WriteLine("</Icon>")
                kml.WriteLine("<LatLonBox>")
                kml.WriteLine("<north>" + CStr(northCoordinates) + "</north><south>" + CStr(southCoordinates) + "</south>")
                kml.WriteLine("<west>" + CStr(westCoordinates) + "</west><east>" + CStr(eastCoordinates) + "</east>")
                kml.WriteLine("</LatLonBox>")
                kml.WriteLine("</GroundOverlay>")
                kml.WriteLine("</Document>")
                kml.WriteLine("</kml>")
            End If
            'Close the file
            kml.Close()

            'Create the image temp
            If (CreateImages) Then
                'Create the directory
                If (Not My.Computer.FileSystem.DirectoryExists(OutputPath & "\" & ImagesLocalPath & "\" & (deepLevel - 1))) Then
                    My.Computer.FileSystem.CreateDirectory(OutputPath & "\" & ImagesLocalPath & "\" & (deepLevel - 1))
                End If
                'Save the image
                Dim myImage As Image = ImageUtils.TextImage(nameKml, 900, 900)
                ImageUtils.Save(myImage, OutputPath & "\" & ImagesLocalPath & "\" & (deepLevel - 1) & "\" & nameKml & ".png", ImageFormat.Png)
            End If
        Next
    End Sub

End Class
